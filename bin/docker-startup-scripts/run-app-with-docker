#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ENV_CONFIG_FILE="${SCRIPT_DIR}/../.env"

. "${ENV_CONFIG_FILE}"

. "${SPRING_BACK_END_DIR}"/bin/.env
. "${ANGULAR_FRONT_END_DIR}"/bin/.env

############################################################
# Help                                                     #
############################################################
help() {
    echo ""
    echo -e "Start the entire full-stack application by running the docker-compose.yaml file in the ${REPO_ROOT_DIR} directory. This command will: \n\t- build or rebuild the front-end and  back-end Docker services. These services in turn build an image from a Dockerfile. \n\n\t- start all the container for each service listed inthe docker-compose.yaml file." | fmt
    echo ""
    echo -e "Usage: $0 [-b | -h]" | fmt
    echo -e "\t-b\t Build only. By default we use 'docker compose watch' for development purposes. This toggle will only build and run; meaning if you change code locally those changes will not automatically take affect on the running Docker container." | fmt
    echo -e "\t-h\t Display this help message" | fmt
    echo ""
}

############################################################
############################################################
# Main Program                                             #
############################################################
############################################################

COMMAND="docker compose build && docker compose"
DOCKER_RUN_COMMAND="watch"

while getopts "bh" opt; do
    case $opt in
    b)
        DOCKER_RUN_COMMAND="up --remove-orphans"
        ;;
    h)
        help
        exit 0
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        help
        exit 1
        ;;
    :)
        echo ""
        echo "Option -$OPTARG requires an argument." >&2
        help
        exit 1
        ;;
    esac
done

requiredProgramCheck docker "${MISSING_DOCKER_MESSAGE}"

fileToCheck "${DEFAULT_CERT_KEY_DIR}" "${CRT_FILE_TYPE}" "${MISSING_SSL_FILE_MESSAGE}"
fileToCheck "${DEFAULT_CERT_KEY_DIR}" "${KEY_FILE_TYPE}" "${MISSING_SSL_FILE_MESSAGE}"

cd "${REPO_ROOT_DIR}" || exit

eval "${COMMAND}" "${DOCKER_RUN_COMMAND}"
