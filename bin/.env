#!/usr/bin/env bash

ENV_SCRIPT_DIR_LEVEL_00=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

export REPO_ROOT_DIR="${ENV_SCRIPT_DIR_LEVEL_00}/.."

export SPRING_BACK_END_DIR="${REPO_ROOT_DIR}/spring-back-end"
export ANGULAR_FRONT_END_DIR="${REPO_ROOT_DIR}/angular-front-end"

#
## Setting default values for variables associated with SSL and HTTPS to be imported across back and front-ends
#
export ENABLE_LOCALHOST_HTTPS_SCRIPT_LOCATION="${REPO_ROOT_DIR}/bin/ssl/enable-localhost-https"

export DEFAULT_SSL_FILES_DIR="${REPO_ROOT_DIR}/ssl-files"
export DEFAULT_SSL_KEYSTORE_DIR="${ENV_SCRIPT_DIR_LEVEL_00}/../spring-back-end/pjl-application/pjl-application-core/src/main/resources/keystore"
export DEFAULT_CERT_KEY_DIR="${ENV_SCRIPT_DIR_LEVEL_00}/../angular-front-end/ssl-assets"

export DEFAULT_CA_FILE="ca.crt"
export DEFAULT_CA_NAME="root"
export DEFAULT_CERTIFICATE_FILE="server.crt"
export DEFAULT_DAYS_VALID=90
export DEFAULT_OPEN_SSL_CONFIGURATION_FILE="server.csr.cnf"
export DEFAULT_OPEN_SSL_FILE="server.csr"
export DEFAULT_OPEN_SSL_FILE="server.csr"
export DEFAULT_P12_ALIAS="pjl"
export DEFAULT_P12_FILE="server.p12"
export DEFAULT_ROOT_SSL_CERT_PEM_NAME=rootCA.pem
export DEFAULT_RSA_KEY_NAME="rootCA.key"
export DEFAULT_SERVER_KEY_FILE="server.key"
export DEFAULT_SERVER_KEY_FILE="server.key"
export DEFAULT_V3_EXT_FILENAME="v3.ext"

#
## Docker variables
#
SPRING_DOCKER_PREFIX=spring-back-end
ANGULAR_DOCKER_PREFIX=angular-front-end

SPRING_DOCKER_IMAGE_NAME_OUTER=${SPRING_DOCKER_PREFIX}-outer
ANGULAR_DOCKER_IMAGE_NAME_OUTER="${ANGULAR_DOCKER_PREFIX}-outer"

SPRING_DOCKER_RUNNING_IMAGE_CONTAINER_ID=$(docker ps --filter "name=${SPRING_DOCKER_PREFIX}" -q)
ANGULAR_DOCKER_RUNNING_IMAGE_CONTAINER_ID=$(docker ps --filter "name=${ANGULAR_DOCKER_PREFIX}" -q)

DEFAULT_ANGULAR_DOCKER_WORKDIR="angular-app"

export SPRING_DOCKER_IMAGE_NAME_OUTER
export ANGULAR_DOCKER_IMAGE_NAME_OUTER
export DEFAULT_ANGULAR_DOCKER_WORKDIR
export SPRING_DOCKER_RUNNING_IMAGE_CONTAINER_ID
export ANGULAR_DOCKER_RUNNING_IMAGE_CONTAINER_ID

#
## Shared variables
#

export MISSING_DOCKER_MESSAGE="You'll need to install Docker (https://docs.docker.com/get-docker/) and ensure it is running before this command will work."

#
## Shared Functions
#

fileToCheck() {
  LOCATION_TO_CHECK=$1
  FILE_TYPE_TO_CHECK=$2
  ERROR_MESSAGE_IF_MISSING=$3

  echo
  echo "Checking to make sure there is a ${FILE_TYPE_TO_CHECK} file in this location: ${LOCATION_TO_CHECK}"
  echo

  if [[ $(ls -A "${LOCATION_TO_CHECK}"/*"${FILE_TYPE_TO_CHECK}"*) ]]; then
    echo "There is a ${FILE_TYPE_TO_CHECK} file, proceeding."
    echo
  else
    echo
    echo -e "${ERROR_MESSAGE_IF_MISSING}" | fmt
    echo
    read -r -p "Do you want to try and run the front-end anyway? (y/n) " yn
    case $yn in
    y | Y)
      echo "OK. Continuing..."
      ;;
    n | N)
      echo "OK. Quitting here..."
      exit 0
      ;;
    *)
      echo "invalid response"
      exit 1
      ;;
    esac
  fi
}

missingRequiredOptionErrorMessage() {
  echo
  echo "Missing required option -$1" >&2
  exit 1
}

requiredOptionCheck() {
  OPTION_VALUE=$1
  OPTION_KEY=$2

  if [ -z "${OPTION_VALUE}" ]; then
    missingRequiredOptionErrorMessage "$OPTION_KEY"
  fi
}

requiredProgramCheck() {
  PROGRAM_TO_CHECK=$1
  CUSTOM_ERROR_MESSAGE=$2

  if ! command -v "${PROGRAM_TO_CHECK}" &>/dev/null; then
    echo
    echo "${PROGRAM_TO_CHECK} could not be found"
    echo "${CUSTOM_ERROR_MESSAGE}"
    echo
    exit 1
  fi
}

deleteAllFilesInDirectoryCheck() {
  DIRECTORY_TO_DELETE_FILES=$1

  echo

  read -r -p "Delete all files in ${DIRECTORY_TO_DELETE_FILES}? (y/n) " yn
  case $yn in
  y | Y)
    echo "Removing files from ${DIRECTORY_TO_DELETE_FILES}..."
    rm "${DIRECTORY_TO_DELETE_FILES}"/*
    ;;
  n | N)
    echo "Proceeding without deleting files..."
    ;;
  *)
    echo "invalid response"
    exit 1
    ;;
  esac
  echo
}

listAvailableOptionsErrorMessage() {
  # Whenever possible limit the types of inputs a user can provide to decrease bad input errors
  # Example Usage:
  # - Create an array of possible values: $ POSSIBLE_VALUES_ARRAY=("x" "y" "z")
  # - Pass the array as a param when calling this function: $ listAvailableOptionsErrorMessage "${POSSIBLE_VALUES_ARRAY[@]}"
  POSSIBLE_OPTIONS_ARRAY=("$@")

  echo "can only handle the following case-sensitive values:"

  for i in "${!POSSIBLE_OPTIONS_ARRAY[@]}"; do
    printf "%s\t- ${POSSIBLE_OPTIONS_ARRAY[$i]}\n"
  done
}
